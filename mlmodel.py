# -*- coding: utf-8 -*-
import numpy as np
from xgboost import XGBClassifier
from sklearn import metrics
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from sklearn.preprocessing import LabelEncoder


def xgbmodel():
    data1 = pd.read_csv('/home/msmal/object_type/X_enc_object.csv', header=0)
    print("data1 read over!")
    data2 = pd.read_csv('/home/msmal/float_type/train.csv', header=0)
    data2[np.isinf(data2)] = -1
    data2[np.isnan(data2)] = -2
    print("data2 read over!")
    X = pd.concat([data1.iloc[:, 1:], data2], axis=1)
    y = pd.read_csv('/home/msmal/label.csv', header=0)
    scaler = preprocessing.StandardScaler()
    X_scaled = scaler.fit_transform(X)
    encoder = LabelEncoder()
    y = encoder.fit_transform(y)
    X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, y, test_size=0.005, random_state=49)
    #xgbmodel:xgb = XGBClassifier(n_jobs=-1)
    xgb = XGBClassifier(n_jobs=-1,n_estimators=500,learning_rate=0.05,subsample=0.8)
    xgb.fit(X_train, Y_train)
    xgb.save_model('xgb1.model')
    print("model has saved!")
    xgbpre = xgb.predict(X_test)
    xgb_report = metrics.classification_report(Y_test, xgbpre)
    print(xgb_report)


def load_xgb():
    import numpy as np
    import pandas as pd
    import xgboost
    from sklearn import preprocessing

    # 载入模型
    model = xgboost.Booster(model_file='xgb.model')
    print("model load over!")
    data1 = pd.read_csv('/home/wdfu/msmal/object_type/x_enc_object.csv', header=0)
    print("data1 read over!")
    data2 = pd.read_csv('/home/wdfu/msmal/float_type/test.csv', header=0)
    data2[np.isinf(data2)] = -1
    data2[np.isnan(data2)] = -2
    print("data2 read over!")
    test_x = pd.concat([data1.iloc[:, 1:], data2], axis=1)

    scaler = preprocessing.StandardScaler()
    test_x = scaler.fit_transform(test_x)
    test_x = xgboost.DMatrix(test_x)
    res = model.predict(test_x)
    res = pd.DataFrame(res)
    res.to_csv('xgbpre.csv', header=None, index=False)

def rfmodel():
    from sklearn.ensemble import RandomForestClassifier
    import pickle
    # data1 = pd.read_csv('/home/msmal/object_type/X_scale.csv', header=0)
    data1 = pd.read_csv('/home/wadfu/msmal/object_type/X_scale.csv', header=0)
    print("data1 read over!")
    # data2 = pd.read_csv('/home/msmal/float_type/train.csv', header=0)
    data2 = pd.read_csv('/home/wdfu/msmal/float_type/train.csv', header=0)
    data2[np.isinf(data2)] = -1
    data2[np.isnan(data2)] = -2
    print("data2 read over!")
    # y = pd.read_csv('/home/msmal/label.csv', header=0)
    y = pd.read_csv('/home/wdfu/msmal/label.csv', header=0)
    scaler = preprocessing.StandardScaler()
    data2 = scaler.fit_transform(data2)
    X_scaled = pd.concat([data1.iloc[:, 1:],pd.DataFrame(data2)], axis=1)
    encoder = LabelEncoder()
    y = encoder.fit_transform(y)
    X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, y, test_size=0.005, random_state=49)
    rf=RandomForestClassifier(criterion= 'gini', max_depth= 50, min_samples_split= 2, min_weight_fraction_leaf= 0.0,\
                                   n_estimators= 500,n_jobs=-1)
    rf.fit(X_train, Y_train)
    with open("rfmodel.pkl", "wb") as f:
        pickle.dump(rf,f)
    print("model has saved!")
    rfpre = rf.predict(X_test)
    rf_report = metrics.classification_report(Y_test, rfpre)
    print(rf_report)

if __name__ == '__main__':
    score = xgbmodel()
    print(score)
