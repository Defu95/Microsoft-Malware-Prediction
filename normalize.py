'''The main purpose of this function is to combine train data and test data,
then apply encoding according to their attribution'''

train_file = '/home/kg/train.csv'
test_file = '/home/kg/test.csv'

import pandas as pd
import numpy as np


def split_trainfile():
    '''split data according to their data types'''
    file = train_file
    data = pd.read_csv(file, header=0)
    label = pd.DataFrame(data.iloc[:, -1])
    label.to_csv('/home/kg/label.csv', header=['label'], index=False)
    col_num = data.shape[1] - 1
    object_type = pd.DataFrame()
    float_type = pd.DataFrame()
    for i in range(col_num):
        if data.dtypes[i] == 'object':
            tmp = pd.DataFrame(data.iloc[:, i])
            tmp.columns = [data.columns[i]]
            object_type = pd.concat([object_type, tmp], axis=1)
        else:
            tmp = pd.DataFrame(data.iloc[:, i])
            tmp.columns = [data.columns[i]]
            float_type = pd.concat([float_type, tmp], axis=1)
    object_type.to_csv('/home/kg/object_type/train.csv', index=False)
    float_type.to_csv('/home/kg/float_type/train.csv', index=False)


def split_testfile():
    '''按照数据类型进行分开处理，主要有object./float/int等类型'''
    file = '/home/kg/test.csv'
    data = pd.read_csv(file, header=0)
    print("file read done!")
    col_num = data.shape[1]
    object_type = pd.DataFrame()
    float_type = pd.DataFrame()
    for i in range(col_num):
        print(i)
        if data.dtypes[i] == 'object':
            tmp = pd.DataFrame(data.iloc[:, i])
            tmp.columns = [data.columns[i]]
            object_type = pd.concat([object_type, tmp], axis=1)
        else:
            tmp = pd.DataFrame(data.iloc[:, i])
            tmp.columns = [data.columns[i]]
            float_type = pd.concat([float_type, tmp], axis=1)
    object_type.to_csv('/home/kg/object_type/test.csv', index=False)
    float_type.to_csv('/home/kg/float_type/test.csv', index=False)


def combine_object():
    '''按照object类型把测试集和训练集进行拼接而后进行向量化'''
    train_file = '/home/kg/object_type/train.csv'
    test_file = '/home/kg/object_type/test.csv'
    from sklearn.preprocessing import LabelEncoder
    dtrain = pd.read_csv(train_file, header=0)
    print("train file read done!")
    dtest = pd.read_csv(test_file, header=0)
    print("test file read done!")
    train_row = dtrain.shape[0]
    data = pd.concat([dtrain, dtest], axis=0)
    data.iloc[:, :].fillna('abnormal', inplace=True)
    # for i in range(data.shape[1]):
    #     if dtrain.dtypes[i] == 'object':
    #         data.iloc[:, i].fillna('abnormal', inplace=True)
    #     else:
    #         data.iloc[:, i][np.isnan(data.iloc[:, i])] = -1
    #         data.iloc[:, i][np.isinf(data.iloc[:, i])] = -2
    print("fill nan over!")
    vec = pd.DataFrame()
    for i in range(data.shape[1]):
        print(i)
        enc = LabelEncoder()
        enc.fit(data.iloc[:, i])
        res = pd.DataFrame(enc.transform(data.iloc[:, i]))
        vec = pd.concat([vec, res], axis=1)
    X_enc_object = pd.DataFrame(vec.iloc[:train_row, :])
    X_enc_object.to_csv('/home/kg/object_type/X_enc_object.csv', header=dtest.columns, index=False)
    x_enc_object = pd.DataFrame(vec.iloc[train_row:, :])
    x_enc_object.to_csv('/home/kg/object_type/x_enc_object.csv', header=dtest.columns, index=False)


def combine_float():
    train_file = '/home/kg/float_type/train.csv'
    test_file = '/home/kg/float_type/test.csv'
    from sklearn.preprocessing import LabelEncoder
    dtrain = pd.read_csv(train_file, header=0)
    print("train file read done!")
    dtest = pd.read_csv(test_file, header=0)
    print("test file read done!")
    train_row = dtrain.shape[0]
    data = pd.concat([dtrain, dtest], axis=0)
    data.iloc[:, :][np.isnan(data.iloc[:, :])] = -1
    data.iloc[:, :][np.isinf(data.iloc[:, :])] = -2
    print("fill nan over!")
    X_enc_float = pd.DataFrame(data.iloc[:train_row, :])
    X_enc_float.to_csv('/home/kg/float_type/X_enc_float.csv', header=dtest.columns, index=False)
    x_enc_float = pd.DataFrame(data.iloc[train_row:, :])
    x_enc_float.to_csv('/home/kg/float_type/x_enc_float.csv', header=dtest.columns, index=False)
    # vec = pd.DataFrame()
    # for i in range(data.shape[1]):
    #     print(i)
    #     enc = LabelEncoder()
    #     enc.fit(data.iloc[:, i])
    #     res = pd.DataFrame(enc.transform(data.iloc[:, i]))
    #     vec = pd.concat([vec, res], axis=1)
    # X_enc_float = pd.DataFrame(vec.iloc[:train_row, :])
    # X_enc_float.to_csv('/home/kg/float_type/X_enc_float.csv', header=dtest.columns, index=False)
    # x_enc_float = pd.DataFrame(vec.iloc[train_row:, :])
    # x_enc_float.to_csv('/home/kg/float_type/x_enc_float.csv', header=dtest.columns, index=False)


# 使用均值替换nan值,并归一化
def combine_float2():
    import pandas as pd
    import numpy as np
    from sklearn.preprocessing import StandardScaler
    train = pd.read_csv('/home/wdfu/msmal/float_type/train.csv', header=0)
    test = pd.read_csv('/home/wdfu/msmal/float_type/test.csv', header=0)
    data = pd.concat([train, test], axis=0)
    train_num = train.shape[0]
    for i in range(data.shape[1]):
        col_sum = sum(data.iloc[:, i])
        no_nan_num = data.iloc[:, i].count()
        col_mean = col_sum / no_nan_num
        data.iloc[:, i][np.isnan(data.iloc[:, i])] = col_mean
    scale = StandardScaler()
    data = scale.fit_transform(data)
    data = pd.DataFrame(data)
    pd.DataFrame(data.iloc[:train_num, :]).to_csv('train_mean.csv', header=train.columns, index=False)
    pd.DataFrame(data.iloc[train_num:, :]).to_csv('test_mean.csv', header=test.columns, index=False)

# if __name__ == '__main__':
#     combine_file(train_file, test_file)
